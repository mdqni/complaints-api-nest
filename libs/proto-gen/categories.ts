// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: categories.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "categories";

export interface CreateCategoryRequest {
  name: string;
  description: string;
}

export interface GetCategoryRequest {
  id: string;
}

export interface ListCategoriesRequest {
}

export interface DeleteCategoryRequest {
  id: string;
}

export interface DeleteCategoryResponse {
  success: boolean;
}

export interface Category {
  id: string;
  name: string;
  description: string;
  createdAt: string;
  updatedAt: string;
}

export interface ListCategoriesResponse {
  categories: CategoryResponse[];
}

export interface CategoryResponse {
  category: Category | undefined;
}

export const CATEGORIES_PACKAGE_NAME = "categories";

function createBaseCreateCategoryRequest(): CreateCategoryRequest {
  return { name: "", description: "" };
}

export const CreateCategoryRequest: MessageFns<CreateCategoryRequest> = {
  encode(message: CreateCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetCategoryRequest(): GetCategoryRequest {
  return { id: "" };
}

export const GetCategoryRequest: MessageFns<GetCategoryRequest> = {
  encode(message: GetCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListCategoriesRequest(): ListCategoriesRequest {
  return {};
}

export const ListCategoriesRequest: MessageFns<ListCategoriesRequest> = {
  encode(_: ListCategoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCategoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCategoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteCategoryRequest(): DeleteCategoryRequest {
  return { id: "" };
}

export const DeleteCategoryRequest: MessageFns<DeleteCategoryRequest> = {
  encode(message: DeleteCategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteCategoryResponse(): DeleteCategoryResponse {
  return { success: false };
}

export const DeleteCategoryResponse: MessageFns<DeleteCategoryResponse> = {
  encode(message: DeleteCategoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCategoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCategoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCategory(): Category {
  return { id: "", name: "", description: "", createdAt: "", updatedAt: "" };
}

export const Category: MessageFns<Category> = {
  encode(message: Category, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Category {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListCategoriesResponse(): ListCategoriesResponse {
  return { categories: [] };
}

export const ListCategoriesResponse: MessageFns<ListCategoriesResponse> = {
  encode(message: ListCategoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      CategoryResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCategoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCategoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(CategoryResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCategoryResponse(): CategoryResponse {
  return { category: undefined };
}

export const CategoryResponse: MessageFns<CategoryResponse> = {
  encode(message: CategoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.category !== undefined) {
      Category.encode(message.category, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.category = Category.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface CategoriesServiceClient {
  createCategory(request: CreateCategoryRequest): Observable<CategoryResponse>;

  getCategory(request: GetCategoryRequest): Observable<CategoryResponse>;

  listCategories(request: ListCategoriesRequest): Observable<ListCategoriesResponse>;

  deleteCategory(request: DeleteCategoryRequest): Observable<DeleteCategoryResponse>;
}

export interface CategoriesServiceController {
  createCategory(
    request: CreateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  getCategory(request: GetCategoryRequest): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  listCategories(
    request: ListCategoriesRequest,
  ): Promise<ListCategoriesResponse> | Observable<ListCategoriesResponse> | ListCategoriesResponse;

  deleteCategory(
    request: DeleteCategoryRequest,
  ): Promise<DeleteCategoryResponse> | Observable<DeleteCategoryResponse> | DeleteCategoryResponse;
}

export function CategoriesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createCategory", "getCategory", "listCategories", "deleteCategory"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CategoriesService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CategoriesService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORIES_SERVICE_NAME = "CategoriesService";

export type CategoriesServiceService = typeof CategoriesServiceService;
export const CategoriesServiceService = {
  createCategory: {
    path: "/categories.CategoriesService/CreateCategory",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateCategoryRequest): Buffer =>
      Buffer.from(CreateCategoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateCategoryRequest => CreateCategoryRequest.decode(value),
    responseSerialize: (value: CategoryResponse): Buffer => Buffer.from(CategoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CategoryResponse => CategoryResponse.decode(value),
  },
  getCategory: {
    path: "/categories.CategoriesService/GetCategory",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCategoryRequest): Buffer => Buffer.from(GetCategoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetCategoryRequest => GetCategoryRequest.decode(value),
    responseSerialize: (value: CategoryResponse): Buffer => Buffer.from(CategoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CategoryResponse => CategoryResponse.decode(value),
  },
  listCategories: {
    path: "/categories.CategoriesService/ListCategories",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListCategoriesRequest): Buffer =>
      Buffer.from(ListCategoriesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListCategoriesRequest => ListCategoriesRequest.decode(value),
    responseSerialize: (value: ListCategoriesResponse): Buffer =>
      Buffer.from(ListCategoriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListCategoriesResponse => ListCategoriesResponse.decode(value),
  },
  deleteCategory: {
    path: "/categories.CategoriesService/DeleteCategory",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteCategoryRequest): Buffer =>
      Buffer.from(DeleteCategoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteCategoryRequest => DeleteCategoryRequest.decode(value),
    responseSerialize: (value: DeleteCategoryResponse): Buffer =>
      Buffer.from(DeleteCategoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteCategoryResponse => DeleteCategoryResponse.decode(value),
  },
} as const;

export interface CategoriesServiceServer extends UntypedServiceImplementation {
  createCategory: handleUnaryCall<CreateCategoryRequest, CategoryResponse>;
  getCategory: handleUnaryCall<GetCategoryRequest, CategoryResponse>;
  listCategories: handleUnaryCall<ListCategoriesRequest, ListCategoriesResponse>;
  deleteCategory: handleUnaryCall<DeleteCategoryRequest, DeleteCategoryResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
